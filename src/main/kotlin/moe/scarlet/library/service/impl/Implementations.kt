package moe.scarlet.library.service.impl

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper
import com.baomidou.mybatisplus.core.mapper.BaseMapper
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl
import moe.scarlet.library.entity.*
import moe.scarlet.library.service.IBorrowInfoService
import moe.scarlet.library.service.ISearchable
import moe.scarlet.library.service.IUserService
import moe.scarlet.library.service.QueryResult
import org.springframework.stereotype.Service
import java.math.BigDecimal
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import kotlin.jvm.optionals.getOrNull

@Service
abstract class AbstractServiceImpl<T> : ServiceImpl<BaseMapper<T>, T>(), ISearchable<T> {
    override fun query(
        searchBy: String,
        query: String,
        match: String,
        sortBy: String,
        order: String,
        start: Int,
        count: Int,
        preprocessor: (QueryWrapper<T>) -> Unit
    ) = QueryWrapper<T>().apply(preprocessor).let {
        if (query.isNotBlank() && searchBy.isNotBlank())
            if (match.lowercase() == "eq")
                it.eq(searchBy, query)
            else
                it.like(searchBy, query)

        val cnt = this.count(it)

        it.orderBy(sortBy.isNotBlank(), order.lowercase() == "asc", sortBy)

        QueryResult(
            cnt, if (cnt != 0L && count != 0) this.list(it.last("LIMIT $start, $count")) else emptyList()
        )
    }
}

@Service
class BorrowInfoServiceImpl : AbstractServiceImpl<BorrowInfo>(), IBorrowInfoService {
    override fun myBorrow(
        userId: Long,
        searchBy: String,
        query: String,
        match: String,
        sortBy: String,
        order: String,
        start: Int,
        count: Int
    ) = this.query(searchBy, query, match, sortBy, order, start, count) {
        it.eq("user_id", userId)
    }
}

@Service
class UserServiceImpl : AbstractServiceImpl<User>(), IUserService {
    override fun register(studentIdNumber: String, password: String, email: String): User {
        val yearMonth = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMM"))

        val newUser = User(
            userId = 0L, // This will be auto-generated by the database
            idNumber = "",
            studentIdNumber = studentIdNumber,
            userName = "",
            password = password,
            email = email,
            roleId = 1L, // normal
            createDate = LocalDate.now(),
            bookNum = 0,
            fine = BigDecimal.ZERO
        )

        this.save(newUser)

        // Generate idNumber
        val userIdLastThree = (newUser.userId % 1000).toString().padStart(3, '0')
        val idNumber = yearMonth + userIdLastThree

        val registeredUser = newUser.copy(idNumber = idNumber)
        this.updateById(registeredUser)

        return registeredUser
    }

    override fun login(idNumber: String, password: String): User? =
        this.getOneOpt(
            QueryWrapper<User>().eq("id_number", idNumber).eq("password", password).last("LIMIT 1")
        ).getOrNull()

    override fun getByIdNumber(idNumber: String): User? =
        this.getOneOpt(
            QueryWrapper<User>().eq("id_number", idNumber).last("LIMIT 1")
        ).getOrNull()
}

@Service
class RoleServiceImpl : AbstractServiceImpl<Role>()

@Service
class PermissionServiceImpl : AbstractServiceImpl<Permission>()

@Service
class BookServiceImpl : AbstractServiceImpl<Book>()

@Service
class LabelServiceImpl : AbstractServiceImpl<Label>()

@Service
class Book2LabelServiceImpl : AbstractServiceImpl<Book2Label>()

@Service
class NoticeServiceImpl : AbstractServiceImpl<Notice>()
